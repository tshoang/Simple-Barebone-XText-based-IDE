/*
 * generated by Xtext 2.22.0
 */
grammar InternalBareBones;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package ac.soton.java.barebones.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package ac.soton.java.barebones.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import ac.soton.java.barebones.services.BareBonesGrammarAccess;

}
@parser::members {
	private BareBonesGrammarAccess grammarAccess;

	public void setGrammarAccess(BareBonesGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getProgramAccess().getStatementsAssignment()); }
			(rule__Program__StatementsAssignment)
			{ after(grammarAccess.getProgramAccess().getStatementsAssignment()); }
		)
		(
			{ before(grammarAccess.getProgramAccess().getStatementsAssignment()); }
			(rule__Program__StatementsAssignment)*
			{ after(grammarAccess.getProgramAccess().getStatementsAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClear
entryRuleClear
:
{ before(grammarAccess.getClearRule()); }
	 ruleClear
{ after(grammarAccess.getClearRule()); } 
	 EOF 
;

// Rule Clear
ruleClear 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClearAccess().getGroup()); }
		(rule__Clear__Group__0)
		{ after(grammarAccess.getClearAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIncrement
entryRuleIncrement
:
{ before(grammarAccess.getIncrementRule()); }
	 ruleIncrement
{ after(grammarAccess.getIncrementRule()); } 
	 EOF 
;

// Rule Increment
ruleIncrement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIncrementAccess().getGroup()); }
		(rule__Increment__Group__0)
		{ after(grammarAccess.getIncrementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDecrement
entryRuleDecrement
:
{ before(grammarAccess.getDecrementRule()); }
	 ruleDecrement
{ after(grammarAccess.getDecrementRule()); } 
	 EOF 
;

// Rule Decrement
ruleDecrement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDecrementAccess().getGroup()); }
		(rule__Decrement__Group__0)
		{ after(grammarAccess.getDecrementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhile
entryRuleWhile
:
{ before(grammarAccess.getWhileRule()); }
	 ruleWhile
{ after(grammarAccess.getWhileRule()); } 
	 EOF 
;

// Rule While
ruleWhile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileAccess().getGroup()); }
		(rule__While__Group__0)
		{ after(grammarAccess.getWhileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getClearParserRuleCall_0()); }
		ruleClear
		{ after(grammarAccess.getStatementAccess().getClearParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getIncrementParserRuleCall_1()); }
		ruleIncrement
		{ after(grammarAccess.getStatementAccess().getIncrementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getDecrementParserRuleCall_2()); }
		ruleDecrement
		{ after(grammarAccess.getStatementAccess().getDecrementParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getWhileParserRuleCall_3()); }
		ruleWhile
		{ after(grammarAccess.getStatementAccess().getWhileParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clear__Group__0__Impl
	rule__Clear__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClearAccess().getClearAction_0()); }
	()
	{ after(grammarAccess.getClearAccess().getClearAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clear__Group__1__Impl
	rule__Clear__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClearAccess().getClearKeyword_1()); }
	'clear'
	{ after(grammarAccess.getClearAccess().getClearKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clear__Group__2__Impl
	rule__Clear__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClearAccess().getNameAssignment_2()); }
	(rule__Clear__NameAssignment_2)
	{ after(grammarAccess.getClearAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clear__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClearAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getClearAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Increment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Increment__Group__0__Impl
	rule__Increment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Increment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncrementAccess().getIncrementAction_0()); }
	()
	{ after(grammarAccess.getIncrementAccess().getIncrementAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Increment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Increment__Group__1__Impl
	rule__Increment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Increment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncrementAccess().getIncrKeyword_1()); }
	'incr'
	{ after(grammarAccess.getIncrementAccess().getIncrKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Increment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Increment__Group__2__Impl
	rule__Increment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Increment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncrementAccess().getNameAssignment_2()); }
	(rule__Increment__NameAssignment_2)
	{ after(grammarAccess.getIncrementAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Increment__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Increment__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Increment__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncrementAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getIncrementAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Decrement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decrement__Group__0__Impl
	rule__Decrement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Decrement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecrementAccess().getDecrementAction_0()); }
	()
	{ after(grammarAccess.getDecrementAccess().getDecrementAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decrement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decrement__Group__1__Impl
	rule__Decrement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Decrement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecrementAccess().getDecrKeyword_1()); }
	'decr'
	{ after(grammarAccess.getDecrementAccess().getDecrKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decrement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decrement__Group__2__Impl
	rule__Decrement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Decrement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecrementAccess().getNameAssignment_2()); }
	(rule__Decrement__NameAssignment_2)
	{ after(grammarAccess.getDecrementAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decrement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decrement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Decrement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecrementAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getDecrementAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__0__Impl
	rule__While__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getWhileAction_0()); }
	()
	{ after(grammarAccess.getWhileAccess().getWhileAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__1__Impl
	rule__While__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getWhileKeyword_1()); }
	'while'
	{ after(grammarAccess.getWhileAccess().getWhileKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__2__Impl
	rule__While__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getNameAssignment_2()); }
	(rule__While__NameAssignment_2)
	{ after(grammarAccess.getWhileAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__3__Impl
	rule__While__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getNotKeyword_3()); }
	'not'
	{ after(grammarAccess.getWhileAccess().getNotKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__4__Impl
	rule__While__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getDigitZeroKeyword_4()); }
	'0'
	{ after(grammarAccess.getWhileAccess().getDigitZeroKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__5__Impl
	rule__While__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getDoKeyword_5()); }
	'do'
	{ after(grammarAccess.getWhileAccess().getDoKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__6__Impl
	rule__While__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getSemicolonKeyword_6()); }
	';'
	{ after(grammarAccess.getWhileAccess().getSemicolonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__7__Impl
	rule__While__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getWhileAccess().getStatementsAssignment_7()); }
		(rule__While__StatementsAssignment_7)
		{ after(grammarAccess.getWhileAccess().getStatementsAssignment_7()); }
	)
	(
		{ before(grammarAccess.getWhileAccess().getStatementsAssignment_7()); }
		(rule__While__StatementsAssignment_7)*
		{ after(grammarAccess.getWhileAccess().getStatementsAssignment_7()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__8__Impl
	rule__While__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getEndKeyword_8()); }
	'end'
	{ after(grammarAccess.getWhileAccess().getEndKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getSemicolonKeyword_9()); }
	';'
	{ after(grammarAccess.getWhileAccess().getSemicolonKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__StatementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getStatementsStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getProgramAccess().getStatementsStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClearAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getClearAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Increment__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIncrementAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getIncrementAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decrement__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecrementAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getDecrementAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getWhileAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__StatementsAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileAccess().getStatementsStatementParserRuleCall_7_0()); }
		ruleStatement
		{ after(grammarAccess.getWhileAccess().getStatementsStatementParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
